/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.contactform;

import java.util.Observable;
import java.util.Observer;
import javax.swing.ImageIcon;
import ui.utility.ComponentPosition;

/**
 *
 * @author javarobots74
 */
public class RotcContacts extends javax.swing.JFrame implements Observer {

    private static RotcContactsController contactController;

    /**
     * Creates new form RotcContacts
     */
    public RotcContacts() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        statusMenu = new javax.swing.JMenu();
        workingDirectoryMenuItem = new javax.swing.JMenuItem();
        synchronizeDirectoryMenuItem = new javax.swing.JMenuItem();
        sycnhronizeCheckBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Det 014 Contacts");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Contact", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Search", jPanel2);

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        statusMenu.setText("Status");
        statusMenu.setToolTipText("");

        workingDirectoryMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error_round_13x13.png"))); // NOI18N
        workingDirectoryMenuItem.setText("Working Directory");
        workingDirectoryMenuItem.setToolTipText("Select the database working directory.");
        workingDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workingDirectoryMenuItemActionPerformed(evt);
            }
        });
        statusMenu.add(workingDirectoryMenuItem);

        synchronizeDirectoryMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error_round_13x13.png"))); // NOI18N
        synchronizeDirectoryMenuItem.setText("Synchronization Directory");
        synchronizeDirectoryMenuItem.setToolTipText("Select the synchronization directory.");
        synchronizeDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeDirectoryMenuItemActionPerformed(evt);
            }
        });
        statusMenu.add(synchronizeDirectoryMenuItem);

        sycnhronizeCheckBox.setText("Synchronize Data Source");
        sycnhronizeCheckBox.setToolTipText("Copy the data source to the synchronization directory on shut down.");
        statusMenu.add(sycnhronizeCheckBox);

        menuBar.add(statusMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workingDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workingDirectoryMenuItemActionPerformed
        contactController.selectWorkingDirectory(this);
    }//GEN-LAST:event_workingDirectoryMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void synchronizeDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeDirectoryMenuItemActionPerformed
        contactController.selectSyncDirectory(this);
    }//GEN-LAST:event_synchronizeDirectoryMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RotcContacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                RotcContacts instance = new RotcContacts();

                RotcContactsModel model = new RotcContactsModel();
                model.addObserver(instance);
                contactController = new RotcContactsController(model);
                contactController.performInitialization();

                ComponentPosition.centerFrame(instance);
                instance.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu statusMenu;
    private javax.swing.JCheckBoxMenuItem sycnhronizeCheckBox;
    private javax.swing.JMenuItem synchronizeDirectoryMenuItem;
    private javax.swing.JMenuItem workingDirectoryMenuItem;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof RotcContactsModel){
            RotcContactsModel model = (RotcContactsModel)o;
            
            //Update icon for working directory
            ImageIcon menuItemIcon;
            if (model.isWorkingDirectoryDefined()){
                menuItemIcon = new ImageIcon(getClass().getResource("/images/check_round_13x13.png"));
            } else {
                menuItemIcon = new ImageIcon(getClass().getResource("/images/error_round_13x13.png"));
            }
            workingDirectoryMenuItem.setIcon(menuItemIcon);
            
            //Update icon for synchronization directory
            if (model.isSynchronizationDirectoryDefined()){
                menuItemIcon = new ImageIcon(getClass().getResource("/images/check_round_13x13.png"));
            } else {
                menuItemIcon = new ImageIcon(getClass().getResource("/images/error_round_13x13.png"));
            }
            synchronizeDirectoryMenuItem.setIcon(menuItemIcon);
        }
    }
}
