/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.contactform;

import configuration.RotcPreferences;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import org.apache.commons.io.FileUtils;
import ui.dialog.AcademicMajorDialog;
import ui.queries.ContactQueries;
import ui.utility.ComponentPosition;
import ui.utility.SearchKeyListener;

/**
 *
 * @author javarobots74
 */
public class RotcContacts extends javax.swing.JFrame implements Observer {

    private static RotcContactsController contactController;
    private boolean firstUpdate = true;
    private boolean lastNameFocus = false;
    private boolean dataUpdate = false;
    private int dataUpdateId;
    private Map<Integer,Integer> majorIDtoComboIndexMap;

    /**
     * Creates new form RotcContacts
     */
    public RotcContacts() {
        initComponents();
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                //Do nothing
            }
            @Override
            public void windowClosed(WindowEvent e) {
                //Do Nothing
            }
            @Override
            public void windowIconified(WindowEvent e) {
                //Do nothing
            }
            @Override
            public void windowDeiconified(WindowEvent e) {
                //Do nothing
            }
            @Override
            public void windowActivated(WindowEvent e) {
                //Do nothing
            }
            @Override
            public void windowDeactivated(WindowEvent e) {
                //Do nothing
            }
            @Override
            public void windowClosing(WindowEvent e) {
                contactController.closeDatabaseConnection();
                if (RotcPreferences.getRotcPreferences().getSyncDirSet() && RotcPreferences.getRotcPreferences().useSyncDirectory()){
                    try {
                        File sourceFile = new File(RotcPreferences.getRotcPreferences().getWorkDir(), contactController.getDataSourceFileName());
                        File destFile = new File(RotcPreferences.getRotcPreferences().getSyncDir(), contactController.getDataSourceFileName());
                        if (JOptionPane.showConfirmDialog(null, "Do you wish to copy the working file to the synchronization directory?", "Synchronize File", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            if (destFile.exists()){
                                FileUtils.deleteQuietly(destFile);
                            }
                            FileUtils.copyFile(sourceFile, destFile);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(RotcContacts.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                System.exit(0);
            }
        });
        majorIDtoComboIndexMap = new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        contactPanel = new javax.swing.JPanel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        phoneOneLabel = new javax.swing.JLabel();
        phoneTwoLabel = new javax.swing.JLabel();
        phoneOneTextField = new javax.swing.JTextField();
        phoneTwoTextField = new javax.swing.JTextField();
        gpaLabel = new javax.swing.JLabel();
        gpaTextField = new javax.swing.JTextField();
        actLabel = new javax.swing.JLabel();
        actTextField = new javax.swing.JTextField();
        majorLabel = new javax.swing.JLabel();
        notesLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        majorLookupButton = new javax.swing.JButton();
        totalRecordsLabel = new javax.swing.JLabel();
        majorComboBox = new javax.swing.JComboBox();
        newButton = new javax.swing.JButton();
        emailLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        enrolledCheckBox = new javax.swing.JCheckBox();
        wingsCheckBox = new javax.swing.JCheckBox();
        searchPanel = new javax.swing.JPanel();
        searchLastNameLabel = new javax.swing.JLabel();
        searchLastNameTextField = new javax.swing.JTextField();
        searchPanelScrollPane = new javax.swing.JScrollPane();
        searchResultsTable = new javax.swing.JTable();
        displayButton = new javax.swing.JButton();
        deletePanel = new javax.swing.JPanel();
        contactIDLabel = new javax.swing.JLabel();
        contactIDTextField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        statusMenu = new javax.swing.JMenu();
        workingDirectoryMenuItem = new javax.swing.JMenuItem();
        synchronizeDirectoryMenuItem = new javax.swing.JMenuItem();
        synchronizeCheckBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Det 014 Contacts");
        setResizable(false);

        lastNameLabel.setText("Last Name:");

        firstNameLabel.setText("First Name:");

        phoneOneLabel.setText("Phone 1:");

        phoneTwoLabel.setText("Phone 2:");

        phoneTwoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneTwoTextFieldActionPerformed(evt);
            }
        });

        gpaLabel.setText("GPA:");

        actLabel.setText("ACT/SAT:");

        majorLabel.setText("Major:");

        notesLabel.setText("Notes:");

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        notesScrollPane.setViewportView(notesTextArea);

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        majorLookupButton.setText("...");
        majorLookupButton.setEnabled(false);
        majorLookupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                majorLookupButtonActionPerformed(evt);
            }
        });

        totalRecordsLabel.setText("Total Records: 0");

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        emailLabel.setText("Email:");

        enrolledCheckBox.setText("Enrolled");
        enrolledCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrolledCheckBoxActionPerformed(evt);
            }
        });

        wingsCheckBox.setText("WINGS");

        javax.swing.GroupLayout contactPanelLayout = new javax.swing.GroupLayout(contactPanel);
        contactPanel.setLayout(contactPanelLayout);
        contactPanelLayout.setHorizontalGroup(
            contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contactPanelLayout.createSequentialGroup()
                        .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneOneLabel)
                            .addComponent(phoneTwoLabel)
                            .addComponent(gpaLabel)
                            .addComponent(actLabel)
                            .addComponent(majorLabel))
                        .addGap(18, 18, 18)
                        .addComponent(majorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(majorLookupButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactPanelLayout.createSequentialGroup()
                        .addComponent(totalRecordsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton))
                    .addGroup(contactPanelLayout.createSequentialGroup()
                        .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notesLabel)
                            .addComponent(notesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contactPanelLayout.createSequentialGroup()
                                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contactPanelLayout.createSequentialGroup()
                                        .addComponent(lastNameLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(actTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(contactPanelLayout.createSequentialGroup()
                                            .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(firstNameLabel)
                                                .addComponent(emailLabel))
                                            .addGap(18, 18, 18)
                                            .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(firstNameTextField)
                                                .addComponent(emailTextField)
                                                .addComponent(phoneOneTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(phoneTwoTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(gpaTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)
                                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(enrolledCheckBox)
                                    .addComponent(wingsCheckBox))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        contactPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {newButton, submitButton});

        contactPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {enrolledCheckBox, wingsCheckBox});

        contactPanelLayout.setVerticalGroup(
            contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enrolledCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wingsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneOneLabel)
                    .addComponent(phoneOneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneTwoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneTwoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gpaLabel)
                    .addComponent(gpaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actLabel)
                    .addComponent(actTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(majorLabel)
                    .addComponent(majorLookupButton)
                    .addComponent(majorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(notesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(totalRecordsLabel)
                    .addComponent(newButton))
                .addContainerGap())
        );

        tabbedPane.addTab("Contact", contactPanel);

        searchLastNameLabel.setText("Last Name:");

        searchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        searchPanelScrollPane.setViewportView(searchResultsTable);

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchLastNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(searchLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchPanelScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displayButton)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLastNameLabel)
                    .addComponent(searchLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanelScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayButton)
                .addContainerGap())
        );

        tabbedPane.addTab("Search", searchPanel);

        contactIDLabel.setText("Contact ID:");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deletePanelLayout = new javax.swing.GroupLayout(deletePanel);
        deletePanel.setLayout(deletePanelLayout);
        deletePanelLayout.setHorizontalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contactIDLabel)
                .addGap(18, 18, 18)
                .addComponent(contactIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deletePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteButton)
                .addContainerGap())
        );
        deletePanelLayout.setVerticalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactIDLabel)
                    .addComponent(contactIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 366, Short.MAX_VALUE)
                .addComponent(deleteButton)
                .addContainerGap())
        );

        tabbedPane.addTab("Delete", deletePanel);

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        statusMenu.setText("Status");
        statusMenu.setToolTipText("");

        workingDirectoryMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error_round_13x13.png"))); // NOI18N
        workingDirectoryMenuItem.setText("Working Directory");
        workingDirectoryMenuItem.setToolTipText("Select the database working directory.");
        workingDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workingDirectoryMenuItemActionPerformed(evt);
            }
        });
        statusMenu.add(workingDirectoryMenuItem);

        synchronizeDirectoryMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error_round_13x13.png"))); // NOI18N
        synchronizeDirectoryMenuItem.setText("Synchronization Directory");
        synchronizeDirectoryMenuItem.setToolTipText("Select the synchronization directory.");
        synchronizeDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeDirectoryMenuItemActionPerformed(evt);
            }
        });
        statusMenu.add(synchronizeDirectoryMenuItem);

        synchronizeCheckBox.setText("Synchronize Data Source");
        synchronizeCheckBox.setToolTipText("Copy the data source to the synchronization directory on shut down.");
        synchronizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeCheckBoxActionPerformed(evt);
            }
        });
        statusMenu.add(synchronizeCheckBox);

        menuBar.add(statusMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workingDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workingDirectoryMenuItemActionPerformed
        contactController.selectWorkingDirectory(this);
    }//GEN-LAST:event_workingDirectoryMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        contactController.closeDatabaseConnection();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void synchronizeDirectoryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeDirectoryMenuItemActionPerformed
        contactController.selectSyncDirectory(this);
    }//GEN-LAST:event_synchronizeDirectoryMenuItemActionPerformed

    private void synchronizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeCheckBoxActionPerformed
        contactController.setUseSyncDirectory(synchronizeCheckBox.isSelected());
    }//GEN-LAST:event_synchronizeCheckBoxActionPerformed

    private void majorLookupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_majorLookupButtonActionPerformed
        AcademicMajorDialog dialog = new AcademicMajorDialog(this,true,contactController.getModel());
        ComponentPosition.centerFrame(dialog);
        dialog.setVisible(true);
    }//GEN-LAST:event_majorLookupButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        Object[] data = new Object[11];
        data[0] = lastNameTextField.getText();
        data[1] = firstNameTextField.getText();
        data[2] = phoneOneTextField.getText();
        data[3] = phoneTwoTextField.getText();
        data[4] = gpaTextField.getText();
        data[5] = actTextField.getText();
        data[6] = majorComboBox.getSelectedItem().toString();
        data[7] = notesTextArea.getText();
        data[8] = (new Date(System.currentTimeMillis())).toString();
        data[9] = dataUpdateId;
        data[10] = emailTextField.getText();

        //Clear Fields when not updating data
        if (!dataUpdate){
            System.out.println("Clear for update");
            lastNameTextField.setText("");
            firstNameTextField.setText("");
            phoneOneTextField.setText("");
            phoneTwoTextField.setText("");
            gpaTextField.setText("");
            actTextField.setText("");
            notesTextArea.setText("");
            emailTextField.setText("");
        }

        contactController.submitData(data, dataUpdate);


    }//GEN-LAST:event_submitButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (!contactIDTextField.getText().isEmpty()){
            ContactQueries queries = contactController.getModel().getQueries();
            queries.deleteContact(contactIDTextField.getText());
            contactController.getModel().setRecordCount(queries.getContactCount());
            contactController.getModel().notifyObservers();
        }
        contactIDTextField.setText("");
        ResultSet result = contactController.getModel().getQueries().contactSearch(searchLastNameTextField.getText());
        if (result != null){
            ((SearchTableModel)searchResultsTable.getModel()).updateData(result);
        } else {
            ((SearchTableModel)searchResultsTable.getModel()).clearData();
        }
        tabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        //Query information based on selected ID and fill text fields
        int selectedRow = searchResultsTable.getSelectedRow();
        if (selectedRow != -1){
            try {
                String selectedIndex = (String) searchResultsTable.getModel().getValueAt(selectedRow, 0);
                ResultSet result = contactController.getModel().getQueries().getContactRecord(selectedIndex);

                //Populate text fields
                result.next();
                lastNameTextField.setText(result.getString("LastName"));
                firstNameTextField.setText(result.getString("FirstName"));
                phoneOneTextField.setText(result.getString("Phone1"));
                phoneTwoTextField.setText(result.getString("Phone2"));
                gpaTextField.setText(result.getString("GPA"));
                actTextField.setText(result.getString("ACTSAT"));
                notesTextArea.setText(result.getString("Notes"));
                emailTextField.setText(result.getString("EmailAddress"));

                //Set combo box selection
                int majorID = result.getInt("major");
                majorComboBox.setSelectedIndex(majorIDtoComboIndexMap.get(majorID));
                dataUpdate = true;
                contactController.getModel().setUpdateData(true);
                dataUpdateId = result.getInt("ID");
            } catch (SQLException ex) {
                Logger.getLogger(RotcContacts.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            lastNameTextField.setText("");
            firstNameTextField.setText("");
            phoneOneTextField.setText("");
            phoneTwoTextField.setText("");
            gpaTextField.setText("");
            actTextField.setText("");
            notesTextArea.setText("");
            emailTextField.setText("");
            majorComboBox.setSelectedIndex(0);
            dataUpdate = false;
            contactController.getModel().setUpdateData(false);
        }
        tabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_displayButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        lastNameTextField.setText("");
        firstNameTextField.setText("");
        phoneOneTextField.setText("");
        phoneTwoTextField.setText("");
        gpaTextField.setText("");
        actTextField.setText("");
        notesTextArea.setText("");
        emailTextField.setText("");
        majorComboBox.setSelectedIndex(0);
        dataUpdate = false;
        contactController.getModel().setUpdateData(false);
    }//GEN-LAST:event_newButtonActionPerformed

    private void phoneTwoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneTwoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneTwoTextFieldActionPerformed

    private void enrolledCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrolledCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enrolledCheckBoxActionPerformed

    private void initSearchPanel(){
        AbstractTableModel searchTableModel = new SearchTableModel();
        searchLastNameTextField.addKeyListener(new SearchKeyListener(searchTableModel, contactController));
        searchResultsTable.setModel(searchTableModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RotcContacts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                RotcContacts instance = new RotcContacts();

                RotcContactsModel model = new RotcContactsModel();
                model.addObserver(instance);
                ComponentPosition.centerFrame(instance);
                instance.setVisible(true);
                contactController = new RotcContactsController(model);

                //Copy sync file
                if (RotcPreferences.getRotcPreferences().getSyncDirSet() && RotcPreferences.getRotcPreferences().useSyncDirectory()){
                    try {
                        File destFile = new File(RotcPreferences.getRotcPreferences().getWorkDir(), contactController.getDataSourceFileName());
                        File sourceFile = new File(RotcPreferences.getRotcPreferences().getSyncDir(), contactController.getDataSourceFileName());
                        if (JOptionPane.showConfirmDialog(null, "Do you wish to copy the sychronized file to the working directory?", "Synchronize File", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                            if (destFile.exists() && sourceFile.exists()){
                                FileUtils.deleteQuietly(destFile);
                            }
                            FileUtils.copyFile(sourceFile, destFile);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(RotcContacts.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                contactController.initDatabase();
                contactController.performInitialization();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actLabel;
    private javax.swing.JTextField actTextField;
    private javax.swing.JLabel contactIDLabel;
    private javax.swing.JTextField contactIDTextField;
    private javax.swing.JPanel contactPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel deletePanel;
    private javax.swing.JButton displayButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JCheckBox enrolledCheckBox;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel gpaLabel;
    private javax.swing.JTextField gpaTextField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JComboBox majorComboBox;
    private javax.swing.JLabel majorLabel;
    private javax.swing.JButton majorLookupButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel phoneOneLabel;
    private javax.swing.JTextField phoneOneTextField;
    private javax.swing.JLabel phoneTwoLabel;
    private javax.swing.JTextField phoneTwoTextField;
    private javax.swing.JLabel searchLastNameLabel;
    private javax.swing.JTextField searchLastNameTextField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JScrollPane searchPanelScrollPane;
    private javax.swing.JTable searchResultsTable;
    private javax.swing.JMenu statusMenu;
    private javax.swing.JButton submitButton;
    private javax.swing.JCheckBoxMenuItem synchronizeCheckBox;
    private javax.swing.JMenuItem synchronizeDirectoryMenuItem;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel totalRecordsLabel;
    private javax.swing.JCheckBox wingsCheckBox;
    private javax.swing.JMenuItem workingDirectoryMenuItem;
    // End of variables declaration//GEN-END:variables

    private void enableMajorSubmitButtons(boolean enable) {
        majorLookupButton.setEnabled(enable);
        submitButton.setEnabled(enable);
    }

    @Override
    public void update(Observable o, Object arg) {
        if (firstUpdate){
            initSearchPanel();
            firstUpdate = false;
        }
        if (o instanceof RotcContactsModel){
            RotcContactsModel model = (RotcContactsModel)o;

            //Focus last name field
            if (!lastNameFocus){
                lastNameTextField.requestFocus();
                lastNameFocus = true;
            }

            //Update icon for working directory
            ImageIcon menuItemIcon;
            if (model.isWorkingDirectoryDefined()){
                menuItemIcon = new ImageIcon(getClass().getResource("/images/check_round_13x13.png"));
            } else {
                menuItemIcon = new ImageIcon(getClass().getResource("/images/error_round_13x13.png"));
                enableMajorSubmitButtons(false);
            }
            workingDirectoryMenuItem.setIcon(menuItemIcon);

            //Update icon for synchronization directory
            if (model.isSynchronizationDirectoryDefined()){
                menuItemIcon = new ImageIcon(getClass().getResource("/images/check_round_13x13.png"));
            } else {
                menuItemIcon = new ImageIcon(getClass().getResource("/images/error_round_13x13.png"));
            }
            synchronizeDirectoryMenuItem.setIcon(menuItemIcon);

            //Set use sync directory
            synchronizeCheckBox.setSelected(model.isUseSyncDirectory());

            //Update record count label
            totalRecordsLabel.setText("Total Records: " + model.getRecordCount());

            //Update academic combo box
            if (!model.isUpdateData()){
                DefaultComboBoxModel majorModel = (DefaultComboBoxModel) majorComboBox.getModel();
                majorModel.removeAllElements();
                Map<String, Integer> majorMap = model.getMajorMap();
                int comboBoxIndex = 0;
                majorIDtoComboIndexMap.clear();
                if (majorMap != null){
                    ArrayList<String> majors = new ArrayList<>();
                    for (String s : majorMap.keySet()){
                        majors.add(s);
                    }
                    Collections.sort(majors);
                    for(String s : majors){
                        majorModel.addElement(s);
                        majorIDtoComboIndexMap.put(majorMap.get(s), comboBoxIndex++);
                    }
                }
            }

            //Check if submit and mjor button should be enabled
            if (model.isEnableButtons()){
                enableMajorSubmitButtons(true);
            }
        }
    }
}
